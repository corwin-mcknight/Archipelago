#pragma once

#include <ktl/type_traits>

namespace ktl {

// ktl::move
template <typename T> constexpr remove_reference_t<T>&& move(T&& arg) noexcept {
    return static_cast<remove_reference_t<T>&&>(arg);
}

template <class T> constexpr T&& forward(typename remove_reference<T>::type& t) noexcept { return static_cast<T&&>(t); }
template <class T> constexpr T&& forward(typename remove_reference<T>::type&& t) noexcept {
    // static_assert(!is_lvalue_reference<T>::value, "Can not forward an rvalue as an lvalue.");
    return static_cast<T&&>(t);
}

}  // namespace ktl