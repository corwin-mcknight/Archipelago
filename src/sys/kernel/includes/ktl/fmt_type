#pragma once

#include <stddef.h>
#include <string.h>

namespace ktl {
namespace format {

// General template for kfmt_printer. This will cause a compile-time error if used.
template <typename T> struct kfmt_printer {};

struct format_args {
    size_t width;
    char specifier;
    bool zero_padded;
    bool right_aligned;
    [[maybe_unused]] char padding[5];

    static void print_string(format_args args, char* buffer, size_t buffer_max, size_t& index, const char* value) {
        const size_t string_length = strlen(value);
        const size_t padding       = args.width >= string_length ? args.width - string_length : string_length;

        if (args.width && args.right_aligned) {
            for (size_t i = 0; (i < padding) && (index < (buffer_max - 1)); ++i) {
                buffer[index++] = args.zero_padded ? '0' : ' ';
            }
        }

        for (size_t i = 0; (i < string_length) && (index < (buffer_max - 1)); ++i) { buffer[index++] = value[i]; }

        if (args.width && !args.right_aligned) {
            for (size_t i = 0; (i < padding) && (index < (buffer_max - 1)); ++i) {
                buffer[index++] = args.zero_padded ? '0' : ' ';
            }
        }
    }
};

}  // namespace format
}  // namespace ktl