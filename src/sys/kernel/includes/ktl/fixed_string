#pragma once

#include <string.h>

#include <ktl/static_array>
#include <ktl/string_view>

namespace ktl {

template <size_t N> class fixed_string {
   public:
    char m_buffer[N];

    fixed_string() {
#ifdef OPTION_KTL_HARDEN
        memset(m_buffer, 0, N);
#endif
    }
    fixed_string(const char* str) {
#ifdef OPTION_KTL_HARDEN
        memset(m_buffer, 0, N);
#endif
        for (size_t i = 0; i < strlen(str); i++) { m_buffer[i] = str[i]; }
    }

    fixed_string(const ktl::string_view str) {
#ifdef OPTION_KTL_HARDEN
        memset(m_buffer, 0, N);
#endif
        str.copy(m_buffer, N);
    }

    // Convert to string view
    operator ktl::string_view() const { return ktl::string_view(m_buffer, length()); }

    operator const char*() const { return m_buffer; }

    size_t length() const {
        size_t len = strlen(m_buffer);
        return len > N ? N : len;
    }

    size_t size() const { return N; }

    template <typename F> void for_each(F func) const {
        size_t len = length();
        for (size_t i = 0; i < len; i++) { func(m_buffer[i]); }
    }

    const char* c_str() const { return m_buffer; }
};
};  // namespace ktl